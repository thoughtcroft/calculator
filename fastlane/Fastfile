# vi:syntax=ruby

# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.3.1"

default_platform :ios

def build_app

  cocoapods

  increment_build_number

  ENV['PROFILE_UDID'] = sigh

  ipa(
    scheme: "wazza-is-awesome",
    configuration: "Beta"
  )

  clean_build_artifacts

  # this is needed to undo the non-deterministic UUID update by cocoapods
  sh "cd .. && git checkout -- Pods/Pods.xcodeproj/"

  commit_version_bump(
    message: 'Version bump by fastlane'
  )

  push_to_git_remote

end



platform :ios do

  before_all do
  ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"

    ensure_git_status_clean

    # Build your app - more options available
    # xctool # run the tests of your app
  end

  #desc "Runs all the tests"
  #lane :test do
    #snapshot
  #end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do

    build_app

    testflight(
      skip_deploy: true,
      beta: true
    )

    # sh "your_script.sh"
    # You can also use other beta testing services here

    slack(
      message: "Successfully deployed wazza-is-awesome beta build to TestFlight",
      success: true
    )
  end

  #desc "Deploy a new version to the App Store"
  #desc "** Full Markdown** Support: `code`"
  #lane :deploy do
    #snapshot
    #sigh
    #deliver(skip_deploy: true, force: true)
    ## frameit
  #end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
  end


  error do |lane, exception|
     slack(
       message: exception.message,
       success: false
     )
  end

end


# More information about multiple platforms in fastlane:
# https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
